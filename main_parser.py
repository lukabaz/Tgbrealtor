# main_parser.py - –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –±–µ–∑ Selenium –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
import signal
import sys
import os
import logging
import time
from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.triggers.interval import IntervalTrigger

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/main_parser.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger("main_parser")

class MainParser:
    def __init__(self):
        self.scheduler = None
        self.running = False
        
    def run_parser(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)"""
        logger.info("üöÄ Main parser triggered")
        
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
            logger.info("üìä Checking for active users...")
            logger.info("üîç No Selenium operations for now - just testing scheduler")
            logger.info("‚úÖ Main parser cycle completed")
            
        except Exception as e:
            logger.error(f"‚ùå Error in main parser: {e}")

    def signal_handler(self, signum, frame):
        """Graceful shutdown handler"""
        logger.info(f"Received signal {signum}, shutting down main parser gracefully...")
        self.running = False
        if self.scheduler:
            logger.info("Shutting down scheduler...")
            self.scheduler.shutdown(wait=True)
        sys.exit(0)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
            signal.signal(signal.SIGTERM, self.signal_handler)
            signal.signal(signal.SIGINT, self.signal_handler)
            
            self.running = True
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler = BlockingScheduler()
            self.scheduler.add_job(
                self.run_parser, 
                IntervalTrigger(minutes=6),
                id='main_parser_job',
                max_instances=1,
                coalesce=True
            )
            
            logger.info("‚úÖ Main scheduler configured successfully")
            logger.info(f"üîÅ Jobs in scheduler: {self.scheduler.get_jobs()}")
            
            # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ä–∞–∑—É
            logger.info("üöÄ Running initial main parse...")
            self.run_parser()
            
            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            logger.info("üöÄ Starting main scheduler...")
            self.scheduler.start()
            
        except Exception as e:
            logger.error(f"‚ùå Error starting main parser: {e}")
            logger.exception("Full traceback:")
            raise

if __name__ == "__main__":
    parser = MainParser()
    parser.run()
