# working_app.py - –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–∞–±–æ—á–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å aiohttp
import asyncio
import logging
import os
import signal
import sys
import threading
import time
from datetime import datetime, timezone, timedelta

from aiohttp import web
from telegram.ext import Application
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import TELEGRAM_TOKEN, WEBHOOK_URL, PORT

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/working_app.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger("working_app")

class WorkingApp:
    def __init__(self):
        self.bot_app = None
        self.web_app = None
        self.scheduler = None
        self.running = False
        
    async def webhook_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
        try:
            data = await request.json()
            logger.info(f"üì® Received webhook: {data}")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            
            return web.Response(text="OK")
        except Exception as e:
            logger.error(f"‚ùå Webhook error: {e}")
            return web.Response(text="ERROR", status=500)
    
    def setup_web_app(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ aiohttp –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.web_app = web.Application()
        
        # –ú–∞—Ä—à—Ä—É—Ç—ã
        self.web_app.router.add_post(f'/{TELEGRAM_TOKEN}', self.webhook_handler)
        
        logger.info("‚úÖ Web app routes configured")
    
    def setup_telegram_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞"""
        try:
            self.bot_app = Application.builder().token(TELEGRAM_TOKEN).build()
            logger.info("‚úÖ Telegram bot initialized")
        except Exception as e:
            logger.error(f"‚ùå Bot setup error: {e}")
    
    def run_parser(self):
        """–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        logger.info("üöÄ Parser cycle started")
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            logger.info("üìä Parser cycle completed")
        except Exception as e:
            logger.error(f"‚ùå Parser error: {e}")

    def setup_parser(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info("Setting up parser scheduler")
        self.scheduler = BackgroundScheduler()
        self.scheduler.add_job(
            self.run_parser, 
            IntervalTrigger(minutes=6),
            id='parser_job',
            max_instances=1,
            coalesce=True
        )
        self.scheduler.start()
        logger.info("‚úÖ Parser scheduler started")

    def signal_handler(self, signum, frame):
        """Graceful shutdown handler"""
        logger.info(f"Received signal {signum}, shutting down gracefully...")
        self.running = False
        
        if self.scheduler:
            logger.info("Stopping scheduler...")
            self.scheduler.shutdown(wait=True)
            
        sys.exit(0)
        
    async def run_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üöÄ Starting Working App")
            logger.info(f"üì° Webhook URL: {WEBHOOK_URL}")
            logger.info(f"üîå Port: {PORT}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.setup_web_app()
            self.setup_telegram_bot()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            parser_thread = threading.Thread(target=self.setup_parser, daemon=True)
            parser_thread.start()
            
            self.running = True
            
            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            runner = web.AppRunner(self.web_app)
            await runner.setup()
            
            site = web.TCPSite(runner, '0.0.0.0', PORT)
            await site.start()
            
            logger.info(f"üåê Web server started on 0.0.0.0:{PORT}")
            logger.info("‚úÖ Application is ready!")
            
            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–º
            while self.running:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"‚ùå Error in async run: {e}")
            logger.exception("Full traceback:")
            raise
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
            signal.signal(signal.SIGTERM, self.signal_handler)
            signal.signal(signal.SIGINT, self.signal_handler)
            
            # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            asyncio.run(self.run_async())
            
        except Exception as e:
            logger.error(f"‚ùå Error starting working app: {e}")
            logger.exception("Full traceback:")
            raise

if __name__ == "__main__":
    app = WorkingApp()
    app.run()
