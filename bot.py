import os
import json
import redis
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, ContextTypes, MessageHandler, filters, PreCheckoutQueryHandler

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.from_url(os.getenv("REDIS_URL"), decode_responses=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{os.getenv('TELEGRAM_TOKEN')}"

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ Redis
def save_filters(chat_id: int, filters: dict):
    redis_client.set(f"filters:{chat_id}", json.dumps(filters))

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ Redis
def save_bot_status(chat_id: int, status: str):
    redis_client.set(f"bot_status:{chat_id}", status)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –∏–∑ Redis
def get_bot_status(chat_id: int) -> str:
    status = redis_client.get(f"bot_status:{chat_id}")
    return status if status else "stopped"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
def format_filters_response(filters):
    city_map = {'1': '–¢–±–∏–ª–∏—Å–∏', '2': '–ë–∞—Ç—É–º–∏', '3': '–ö—É—Ç–∞–∏—Å–∏'}
    deal_type_map = {'rent': '–ê—Ä–µ–Ω–¥–∞', 'sale': '–ü—Ä–æ–¥–∞–∂–∞'}
    own_ads_map = {'1': '–î–∞', '0': '–ù–µ—Ç'}

    city = city_map.get(filters.get('city', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')
    districts = []
    for city_key in ['tbilisi', 'batumi', 'kutaisi']:
        if filters.get('districts', {}).get(city_key):
            districts.extend(filters['districts'][city_key])
    districts_str = ', '.join(districts) if districts else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
    deal_type = deal_type_map.get(filters.get('deal_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')
    price = f"{filters.get('price_from', '0')}-{filters.get('price_to', '0')}$"
    floor = f"{filters.get('floor_from', '0')}-{filters.get('floor_to', '0')}"
    rooms = f"{filters.get('rooms_from', '0')}-{filters.get('rooms_to', '0')}"
    bedrooms = f"{filters.get('bedrooms_from', '0')}-{filters.get('bedrooms_to', '0')}"
    own_ads = own_ads_map.get(filters.get('own_ads', '0'), '–ù–µ —É–∫–∞–∑–∞–Ω')

    return (
        f"–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–†–∞–π–æ–Ω—ã: {districts_str}\n"
        f"–¢–∏–ø —Å–¥–µ–ª–∫–∏: {deal_type}\n"
        f"–¶–µ–Ω–∞: {price}\n"
        f"–≠—Ç–∞–∂: {floor}\n"
        f"–ö–æ–º–Ω–∞—Ç: {rooms}\n"
        f"–°–ø–∞–ª–µ–Ω: {bedrooms}\n"
        f"–¢–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫: {own_ads}"
    )

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—á—ë—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
def get_settings_keyboard(chat_id: int):
    status = get_bot_status(chat_id)
    status_button = "üü¢ –°—Ç–æ–ø" if status == "running" else "üî¥ –°—Ç–∞—Ä—Ç"
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", web_app={"url": "https://realestatege.netlify.app"}), KeyboardButton(status_button)]
    ], resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Web App –¥–∞–Ω–Ω—ã—Ö
async def webhook_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    filters_data = json.loads(update.message.web_app_data.data)
    save_filters(chat_id, filters_data)
    response_message = format_filters_response(filters_data)
    await context.bot.send_message(chat_id=chat_id, text=response_message, reply_markup=get_settings_keyboard(chat_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def show_settings_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text

    if text in ["üü¢ –°—Ç–æ–ø", "üî¥ –°—Ç–∞—Ä—Ç"]:
        status = get_bot_status(chat_id)
        new_status = "stopped" if status == "running" else "running"
        await context.bot.send_invoice(
            chat_id=chat_id,
            title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º",
            description=f"{'–û—Å—Ç–∞–Ω–æ–≤–∫–∞' if new_status == 'stopped' else '–ó–∞–ø—É—Å–∫'} –±–æ—Ç–∞",
            payload=f"toggle_bot_status:{chat_id}:{new_status}",
            provider_token="",  # –î–ª—è Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
            currency="XTR",  # –¢–æ–ª—å–∫–æ Telegram Stars
            prices=[{"label": "–°—Ç–æ–∏–º–æ—Å—Ç—å", "amount": 0}],
            start_parameter="toggle-bot-status"
        )
    else:
        await context.bot.send_message(chat_id=chat_id, text="–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:", reply_markup=get_settings_keyboard(chat_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
async def pre_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await context.bot.answer_pre_checkout_query(query.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    payment = update.message.successful_payment
    payload = payment.invoice_payload
    _, chat_id_from_payload, new_status = payload.split(":")
    chat_id_from_payload = int(chat_id_from_payload)

    if chat_id == chat_id_from_payload:
        save_bot_status(chat_id, new_status)
        status_text = "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üî¥" if new_status == "stopped" else "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üü¢"
        await context.bot.send_message(
            chat_id=chat_id,
            text=status_text,
            reply_markup=get_settings_keyboard(chat_id)
        )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
def main():
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webhook_update))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, show_settings_keyboard))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    application.add_handler(PreCheckoutQueryHandler(pre_checkout))
    
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 5000)),
        url_path=os.getenv("TELEGRAM_TOKEN"),
        webhook_url=WEBHOOK_URL,
        allowed_updates=["message", "pre_checkout_query"]
    )

if __name__ == "__main__":
    main()