import os
import json
import redis
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, ContextTypes, MessageHandler, filters, PreCheckoutQueryHandler, ChatMemberHandler
from datetime import datetime, timedelta, timezone
import logging

logging.basicConfig(level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)  # —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ httpx
logger = logging.getLogger(__name__)

redis_client = redis.from_url(os.getenv("REDIS_URL"), decode_responses=True)
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{os.getenv('TELEGRAM_TOKEN')}"
INACTIVITY_TTL = int(1.5 * 30 * 24 * 60 * 60)  # 1.5 –º–µ—Å—è—Ü–∞
TRIAL_TTL = 2 * 24 * 60 * 60  # 48 —á–∞—Å–æ–≤
ACTIVE_SUBSCRIPTION_MESSAGE = "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ üü¢"

def save_filters(chat_id: int, url: str):
    redis_client.setex(f"filters:{chat_id}", INACTIVITY_TTL, url)

def get_end_of_subscription():
    next_month = (datetime.now(timezone.utc).replace(day=1) + timedelta(days=32)).replace(day=1)
    return int(next_month.timestamp())

def save_bot_status(chat_id: int, status: str, set_sub_end: bool = False):
    status_key = f"bot_status:{chat_id}"
    sub_end_key = f"subscription_end:{chat_id}"

    redis_client.set(status_key, status)

    if set_sub_end:
        end_timestamp = get_end_of_subscription()
        ttl = end_timestamp - int(datetime.now(timezone.utc).timestamp())
        redis_client.setex(sub_end_key, ttl, end_timestamp)
        redis_client.expire(status_key, ttl)
    else:
        redis_client.expire(status_key, INACTIVITY_TTL)

def is_subscription_active(chat_id: int) -> bool:
    ts = redis_client.get(f"subscription_end:{chat_id}")
    return ts and int(ts) > int(datetime.now(timezone.utc).timestamp())

def get_bot_status(chat_id: int) -> str:
    return redis_client.get(f"bot_status:{chat_id}") or "stopped"

def get_settings_keyboard(chat_id: int):
    status = get_bot_status(chat_id)
    status_btn = "üü¢ –°—Ç–æ–ø" if status == "running" else "üî¥ –°—Ç–∞—Ä—Ç"
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", web_app={"url": "https://realestatege.netlify.app"}), KeyboardButton(status_btn)],
        [KeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å 2 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç—Ä–∏–∞–ª–∞
        [KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    ], resize_keyboard=True)

async def send_status_message(chat_id: int, context: ContextTypes.DEFAULT_TYPE, text: str):
    await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=get_settings_keyboard(chat_id))

def format_filters_response(filters):
    city_map = {'1': '–¢–±–∏–ª–∏—Å–∏', '2': '–ë–∞—Ç—É–º–∏', '3': '–ö—É—Ç–∞–∏—Å–∏'}
    deal_type_map = {'rent': '–ê—Ä–µ–Ω–¥–∞', 'sale': '–ü—Ä–æ–¥–∞–∂–∞'}
    own_ads_map = {'1': '–î–∞', '0': '–ù–µ—Ç'}

    city = city_map.get(filters.get('city', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')
    districts = []
    for city_key in ['tbilisi', 'batumi', 'kutaisi']:
        districts.extend(filters.get('districts', {}).get(city_key, []))
    return (
        f"–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–†–∞–π–æ–Ω—ã: {', '.join(districts) if districts else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"–¢–∏–ø —Å–¥–µ–ª–∫–∏: {deal_type_map.get(filters.get('deal_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–¶–µ–Ω–∞: {filters.get('price_from', '0')}-{filters.get('price_to', '0')}$\n"
        f"–≠—Ç–∞–∂: {filters.get('floor_from', '0')}-{filters.get('floor_to', '0')}\n"
        f"–ö–æ–º–Ω–∞—Ç: {filters.get('rooms_from', '0')}-{filters.get('rooms_to', '0')}\n"
        f"–°–ø–∞–ª–µ–Ω: {filters.get('bedrooms_from', '0')}-{filters.get('bedrooms_to', '0')}\n"
        f"–¢–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫: {own_ads_map.get(filters.get('own_ads', '0'), '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    )

async def webhook_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    filters_data = json.loads(update.message.web_app_data.data)

    if "url" in filters_data:
        save_filters(chat_id, filters_data["url"])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ URL
        utc_timestamp = int(datetime.now(timezone.utc).timestamp())
        logger.info("üíæ Saving filters_timestamp as: %s (UTC)", utc_timestamp)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC
        redis_client.setex(f"filters_timestamp:{chat_id}", INACTIVITY_TTL, utc_timestamp)
        await send_status_message(chat_id, context, format_filters_response(filters_data))
    else:
        await send_status_message(chat_id, context, "–û—à–∏–±–∫–∞: URL –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")

async def welcome_new_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cm = update.my_chat_member
    if cm.chat.type == "private" and cm.old_chat_member.status == "kicked" and cm.new_chat_member.status == "member":
        await send_status_message(cm.chat.id, context, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–°—Ç–∞—Ä—Ç", "–°—Ç–æ–ø", "–ü–æ–ª—É—á–∏—Ç—å 2 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
    if text == "üî¥ –°—Ç–∞—Ä—Ç":
        if is_subscription_active(chat_id):
            save_bot_status(chat_id, "running")
            await send_status_message(chat_id, context, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        else:
            await context.bot.send_invoice(
                chat_id=chat_id,
                title="–î–æ—Å—Ç—É–ø –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º",
                description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü",
                payload=f"toggle_bot_status:{chat_id}:running",
                provider_token="",
                currency="XTR",
                prices=[{"label": "–°—Ç–æ–∏–º–æ—Å—Ç—å", "amount": 250}],
                start_parameter="toggle-bot-status"
            )
    elif text == "üü¢ –°—Ç–æ–ø":
        save_bot_status(chat_id, "stopped")
        message = "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ üî¥" if not is_subscription_active(chat_id) else "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üõë."
        await send_status_message(chat_id, context, message)
    
    elif text == "üéÅ –ü–æ–ª—É—á–∏—Ç—å 2 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ":
        if redis_client.get(f"trial_used:{chat_id}") == "true":
            await context.bot.send_message(chat_id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ 2 –¥–Ω—è!")
        else:
            redis_client.set(f"trial_used:{chat_id}", "true")
            end_of_subscription = int((datetime.now(timezone.utc) + timedelta(seconds=TRIAL_TTL)).timestamp())
            redis_client.setex(f"subscription_end:{chat_id}", TRIAL_TTL, end_of_subscription)

            save_bot_status(chat_id, "running", set_sub_end=True)
            await context.bot.send_message(chat_id, "–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã 2 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ üü¢")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
    elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await context.bot.send_message(chat_id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º —ç—Ç–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    message_text = update.message.text

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –≤–∞—à —á–∞—Ç
    admin_chat_id = '6770986953'  # –í–∞—à Telegram ID
    await context.bot.send_message(admin_chat_id, f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {message_text}")

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    await context.bot.send_message(chat_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –º—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")

# –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    response = "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –µ–≥–æ —á–∞—Ç
    await context.bot.send_message(chat_id, response)

async def pre_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.answer_pre_checkout_query(update.pre_checkout_query.id, ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    _, payload_chat_id, new_status = update.message.successful_payment.invoice_payload.split(":")
    if chat_id == int(payload_chat_id):
        save_bot_status(chat_id, new_status, set_sub_end=True)
        await send_status_message(chat_id, context, ACTIVE_SUBSCRIPTION_MESSAGE)

def main():
    app = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webhook_update))
    app.add_handler(ChatMemberHandler(welcome_new_user, ChatMemberHandler.MY_CHAT_MEMBER))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(PreCheckoutQueryHandler(pre_checkout))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons)) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö 2 –¥–Ω–µ–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))  # –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply_to_user))  # –î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 5000)),
        url_path=os.getenv("TELEGRAM_TOKEN"),
        webhook_url=WEBHOOK_URL,
        allowed_updates=["message", "pre_checkout_query", "my_chat_member"]
    )

if __name__ == "__main__":
    main()