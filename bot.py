import os
import json
import redis
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, ContextTypes, MessageHandler, filters, PreCheckoutQueryHandler, ChatMemberHandler
from datetime import datetime, timedelta, timezone
import logging

known_buttons = {"üî¥ –°—Ç–∞—Ä—Ç","üü¢ –°—Ç–æ–ø","üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏","üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"}

logging.basicConfig(level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)  # —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ httpx
logger = logging.getLogger(__name__)

redis_client = redis.from_url(os.getenv("REDIS_URL"), decode_responses=True)
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{os.getenv('TELEGRAM_TOKEN')}"
INACTIVITY_TTL = int(1.5 * 30 * 24 * 60 * 60)  # 1.5 –º–µ—Å—è—Ü–∞
TRIAL_TTL = 2 * 24 * 60 * 60  # 48 —á–∞—Å–æ–≤
ACTIVE_SUBSCRIPTION_MESSAGE = "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ üü¢"

def save_filters(chat_id: int, url: str):
    redis_client.setex(f"filters:{chat_id}", INACTIVITY_TTL, url)

def get_end_of_subscription():
    subscription_end = datetime.now(timezone.utc) + timedelta(days=30)
    return int(subscription_end.timestamp())

def save_bot_status(chat_id: int, status: str, set_sub_end: bool = False):
    status_key = f"bot_status:{chat_id}"
    sub_end_key = f"subscription_end:{chat_id}"

    redis_client.set(status_key, status)

    if set_sub_end:
        end_timestamp = get_end_of_subscription()
        ttl = end_timestamp - int(datetime.now(timezone.utc).timestamp())
        logger.info(f"Saving bot_status for chat_id={chat_id}: status={status}, "
                    f"subscription_end={end_timestamp} ({datetime.fromtimestamp(end_timestamp, tz=timezone.utc)}), "
                    f"TTL={ttl} seconds, current_time={int(datetime.now(timezone.utc).timestamp())} "
                    f"({datetime.fromtimestamp(int(datetime.now(timezone.utc).timestamp()), tz=timezone.utc)})")
        if ttl <= 0:
            logger.error(f"Invalid TTL for subscription_end:{chat_id}: {ttl}. Not saving.")
            return
        redis_client.setex(sub_end_key, ttl, end_timestamp)
        redis_client.expire(status_key, ttl)
    else:
        redis_client.expire(status_key, INACTIVITY_TTL)

def is_subscription_active(chat_id: int) -> bool:
    ts = redis_client.get(f"subscription_end:{chat_id}")
    return ts and int(ts) > int(datetime.now(timezone.utc).timestamp())

def get_bot_status(chat_id: int) -> str:
    return redis_client.get(f"bot_status:{chat_id}") or "stopped"

def get_settings_keyboard(chat_id: int):
    status = get_bot_status(chat_id)
    status_btn = "üü¢ –°—Ç–æ–ø" if status == "running" else "üî¥ –°—Ç–∞—Ä—Ç"
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", web_app={"url": "https://realestatege.netlify.app"}), KeyboardButton(status_btn)],
        [KeyboardButton("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ"), KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", web_app={"url": "https://realestatege.netlify.app/support"})] 
    ], resize_keyboard=True)

async def send_status_message(chat_id: int, context: ContextTypes.DEFAULT_TYPE, text: str):
    await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=get_settings_keyboard(chat_id))

def format_filters_response(filters):
    city_map = {'1': '–¢–±–∏–ª–∏—Å–∏', '2': '–ë–∞—Ç—É–º–∏', '3': '–ö—É—Ç–∞–∏—Å–∏'}
    deal_type_map = {'rent': '–ê—Ä–µ–Ω–¥–∞', 'sale': '–ü—Ä–æ–¥–∞–∂–∞'}
    own_ads_map = {'1': '–î–∞', '0': '–ù–µ—Ç'}

    city = city_map.get(filters.get('city', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')
    districts = []
    for city_key in ['tbilisi', 'batumi', 'kutaisi']:
        districts.extend(filters.get('districts', {}).get(city_key, []))
    return (
        f"–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–†–∞–π–æ–Ω—ã: {', '.join(districts) if districts else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"–¢–∏–ø —Å–¥–µ–ª–∫–∏: {deal_type_map.get(filters.get('deal_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–¶–µ–Ω–∞: {filters.get('price_from', '0')}-{filters.get('price_to', '0')}$\n"
        f"–≠—Ç–∞–∂: {filters.get('floor_from', '0')}-{filters.get('floor_to', '0')}\n"
        f"–ö–æ–º–Ω–∞—Ç: {filters.get('rooms_from', '0')}-{filters.get('rooms_to', '0')}\n"
        f"–°–ø–∞–ª–µ–Ω: {filters.get('bedrooms_from', '0')}-{filters.get('bedrooms_to', '0')}\n"
        f"–¢–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫: {own_ads_map.get(filters.get('own_ads', '0'), '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    )

async def webhook_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    filters_data = json.loads(update.message.web_app_data.data)

    if "url" in filters_data:
        save_filters(chat_id, filters_data["url"])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ URL
        utc_timestamp = int(datetime.now(timezone.utc).timestamp())
        logger.info("üíæ Saving filters_timestamp as: %s (UTC)", utc_timestamp)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC
        redis_client.setex(f"filters_timestamp:{chat_id}", INACTIVITY_TTL, utc_timestamp)
        await send_status_message(chat_id, context, format_filters_response(filters_data))

    elif "supportMessage" in filters_data:
        message = filters_data["supportMessage"]
        await context.bot.send_message('6770986953', f"üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç {chat_id}:\n{message}")
        await context.bot.send_message(chat_id, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")    
    else:
        await send_status_message(chat_id, context, "–û—à–∏–±–∫–∞: URL –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")

async def welcome_new_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cm = update.my_chat_member
    if cm.chat.type == "private" and cm.old_chat_member.status == "kicked" and cm.new_chat_member.status == "member":
        await send_status_message(cm.chat.id, context, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ üî¥ –°—Ç–∞—Ä—Ç")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    chat_id = update.message.chat_id
    text = update.message.text  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–°—Ç–∞—Ä—Ç", "–°—Ç–æ–ø", "–ü–æ–ª—É—á–∏—Ç—å 2 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
    if text == "üî¥ –°—Ç–∞—Ä—Ç":
        if is_subscription_active(chat_id):
            save_bot_status(chat_id, "running")
            await send_status_message(chat_id, context, "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ñ–¥—ë–º —Å–≤–µ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        else:
            await context.bot.send_invoice(
                chat_id=chat_id,
                title="–î–æ—Å—Ç—É–ø –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º",
                description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
                payload=f"toggle_bot_status:{chat_id}:running",
                provider_token="",
                currency="XTR",
                prices=[{"label": "–°—Ç–æ–∏–º–æ—Å—Ç—å", "amount": 250}],
                start_parameter="toggle-bot-status"
            )
    elif text == "üü¢ –°—Ç–æ–ø":
        save_bot_status(chat_id, "stopped")
        message = "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ üî¥" if not is_subscription_active(chat_id) else "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üõë."
        await send_status_message(chat_id, context, message)
    
    elif text == "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ":
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
        if is_subscription_active(chat_id):
            await context.bot.send_message(chat_id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        elif redis_client.get(f"trial_used:{chat_id}") == "true":
            await context.bot.send_message(chat_id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ 2 –¥–Ω—è!")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
            await context.bot.send_invoice(
                chat_id=chat_id,
                title="–î–æ—Å—Ç—É–ø –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º",
                description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
                payload=f"toggle_bot_status:{chat_id}:running",
                provider_token="",
                currency="XTR",
                prices=[{"label": "–°—Ç–æ–∏–º–æ—Å—Ç—å", "amount": 250}],
                start_parameter="toggle-bot-status"
            )
        else:
            redis_client.set(f"trial_used:{chat_id}", "true")
            current_time = int(datetime.now(timezone.utc).timestamp()) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
            end_of_subscription = int((datetime.now(timezone.utc) + timedelta(seconds=TRIAL_TTL)).timestamp())
            logger.info(f"Activating trial for chat_id={chat_id}: "
                        f"current_time={current_time} ({datetime.fromtimestamp(current_time, tz=timezone.utc)}), "
                        f"end_of_subscription={end_of_subscription} ({datetime.fromtimestamp(end_of_subscription, tz=timezone.utc)}), "
                        f"TTL={TRIAL_TTL} seconds")
            redis_client.setex(f"subscription_end:{chat_id}", TRIAL_TTL, end_of_subscription)
        
            # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º set_sub_end=True, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ TTL
            save_bot_status(chat_id, "running", set_sub_end=False)
            await context.bot.send_message(chat_id, "–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã 2 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ üü¢")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    message_text = update.message.text

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    if message_text in known_buttons:
        return

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    await context.bot.send_message(chat_id, "‚ùó–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –º–µ–Ω—é –∫–Ω–æ–ø–∫—É –ü–æ–¥–¥–µ—Ä–∂–∫–∞.")

# –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    response = "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –µ–≥–æ —á–∞—Ç
    await context.bot.send_message(chat_id, response)

async def pre_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.answer_pre_checkout_query(update.pre_checkout_query.id, ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    _, payload_chat_id, new_status = update.message.successful_payment.invoice_payload.split(":")
    if chat_id == int(payload_chat_id):
        save_bot_status(chat_id, new_status, set_sub_end=True)
        await send_status_message(chat_id, context, ACTIVE_SUBSCRIPTION_MESSAGE)

def main():
    app = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webhook_update))
    app.add_handler(ChatMemberHandler(welcome_new_user, ChatMemberHandler.MY_CHAT_MEMBER))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(PreCheckoutQueryHandler(pre_checkout))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))  # –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 5000)),
        url_path=os.getenv("TELEGRAM_TOKEN"),
        webhook_url=WEBHOOK_URL,
        allowed_updates=["message", "pre_checkout_query", "my_chat_member"]
    )

if __name__ == "__main__":
    main()