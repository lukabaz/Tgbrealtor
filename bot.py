import os
import json
import redis
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, ContextTypes, MessageHandler, filters, PreCheckoutQueryHandler, ChatMemberHandler
from datetime import datetime, timedelta

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.from_url(os.getenv("REDIS_URL"), decode_responses=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{os.getenv('TELEGRAM_TOKEN')}"

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ Redis
def save_filters(chat_id: int, filters: dict):
    redis_client.set(f"filters:{chat_id}", json.dumps(filters))

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ 1 —á–∏—Å–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ (–¥–ª—è TTL)
def get_ttl_to_next_month():
    now = datetime.utcnow()
    # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    next_month = (now.replace(day=1) + timedelta(days=32)).replace(day=1)
    # –í—Ä–µ–º—è –¥–æ 1 —á–∏—Å–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    ttl = int((next_month - now).total_seconds())
    return ttl

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ Redis —Å TTL
def save_bot_status(chat_id: int, status: str):
    key = f"bot_status:{chat_id}"
    redis_client.set(key, status)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –¥–æ 1 —á–∏—Å–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    if status == "running":
        ttl = get_ttl_to_next_month()
        redis_client.expire(key, ttl)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –∏–∑ Redis
def get_bot_status(chat_id: int) -> str:
    status = redis_client.get(f"bot_status:{chat_id}")
    return status if status else "stopped"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—á—ë—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
def get_settings_keyboard(chat_id: int):
    status = get_bot_status(chat_id)
    status_button = "üü¢ –°—Ç–æ–ø" if status == "running" else "üî¥ –°—Ç–∞—Ä—Ç"
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", web_app={"url": "https://realestatege.netlify.app"}), KeyboardButton(status_button)]
    ], resize_keyboard=True)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
def format_filters_response(filters):
    city_map = {'1': '–¢–±–∏–ª–∏—Å–∏', '2': '–ë–∞—Ç—É–º–∏', '3': '–ö—É—Ç–∞–∏—Å–∏'}
    deal_type_map = {'rent': '–ê—Ä–µ–Ω–¥–∞', 'sale': '–ü—Ä–æ–¥–∞–∂–∞'}
    own_ads_map = {'1': '–î–∞', '0': '–ù–µ—Ç'}

    city = city_map.get(filters.get('city', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')
    districts = []
    for city_key in ['tbilisi', 'batumi', 'kutaisi']:
        if filters.get('districts', {}).get(city_key):
            districts.extend(filters['districts'][city_key])
    districts_str = ', '.join(districts) if districts else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
    deal_type = deal_type_map.get(filters.get('deal_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')
    price = f"{filters.get('price_from', '0')}-{filters.get('price_to', '0')}$"
    floor = f"{filters.get('floor_from', '0')}-{filters.get('floor_to', '0')}"
    rooms = f"{filters.get('rooms_from', '0')}-{filters.get('rooms_to', '0')}"
    bedrooms = f"{filters.get('bedrooms_from', '0')}-{filters.get('bedrooms_to', '0')}"
    own_ads = own_ads_map.get(filters.get('own_ads', '0'), '–ù–µ —É–∫–∞–∑–∞–Ω')

    return (
        f"–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–†–∞–π–æ–Ω—ã: {districts_str}\n"
        f"–¢–∏–ø —Å–¥–µ–ª–∫–∏: {deal_type}\n"
        f"–¶–µ–Ω–∞: {price}\n"
        f"–≠—Ç–∞–∂: {floor}\n"
        f"–ö–æ–º–Ω–∞—Ç: {rooms}\n"
        f"–°–ø–∞–ª–µ–Ω: {bedrooms}\n"
        f"–¢–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫: {own_ads}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Web App –¥–∞–Ω–Ω—ã—Ö
async def webhook_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    filters_data = json.loads(update.message.web_app_data.data)
    save_filters(chat_id, filters_data)
    response_message = format_filters_response(filters_data)
    await context.bot.send_message(chat_id=chat_id, text=response_message, reply_markup=get_settings_keyboard(chat_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def welcome_new_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    await context.bot.send_message(chat_id=chat_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:", reply_markup=get_settings_keyboard(chat_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text

    if text == "üî¥ –°—Ç–∞—Ä—Ç":
        status = get_bot_status(chat_id)
        if status == "running":
            # –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ üü¢",
                reply_markup=get_settings_keyboard(chat_id)
            )
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–ª–∞—Ç—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            await context.bot.send_invoice(
                chat_id=chat_id,
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü",
                description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü",
                payload=f"toggle_bot_status:{chat_id}:running",
                provider_token="",
                currency="XTR",
                prices=[{"label": "–°—Ç–æ–∏–º–æ—Å—Ç—å", "amount": 10000}],
                start_parameter="toggle-bot-status"
            )
    elif text == "üü¢ –°—Ç–æ–ø":
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞
        save_bot_status(chat_id, "stopped")
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ üî¥",
            reply_markup=get_settings_keyboard(chat_id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
async def pre_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await context.bot.answer_pre_checkout_query(query.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    payment = update.message.successful_payment
    payload = payment.invoice_payload
    _, chat_id_from_payload, new_status = payload.split(":")
    chat_id_from_payload = int(chat_id_from_payload)

    if chat_id == chat_id_from_payload:
        save_bot_status(chat_id, new_status)
        status_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ üî¥" if new_status == "stopped" else "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ üü¢ –¥–æ 1 —á–∏—Å–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞"
        await context.bot.send_message(
            chat_id=chat_id,
            text=status_text,
            reply_markup=get_settings_keyboard(chat_id)
        )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
def main():
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webhook_update))
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_user))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    application.add_handler(PreCheckoutQueryHandler(pre_checkout))
    
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 5000)),
        url_path=os.getenv("TELEGRAM_TOKEN"),
        webhook_url=WEBHOOK_URL,
        allowed_updates=["message", "pre_checkout_query"]
    )

if __name__ == "__main__":
    main()