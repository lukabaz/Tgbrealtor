# parser.py - Selenium Parser Process
import signal
import sys
import time
import random
import logging
import os
from datetime import datetime, timezone, timedelta
from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.triggers.interval import IntervalTrigger
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException

from utils.redis_client import redis_client
from sites.router import get_parse_function
from utils.driver import init_driver
from tg.sender import send_to_telegram

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/parser.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger("selenium_parser")

class SeleniumParser:
    def __init__(self):
        self.scheduler = None
        self.running = False
        
    def close_modal_if_exists(self, driver):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
        try:
            modal_close = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), '–ó–∞–∫—Ä—ã—Ç—å')]"))
            )
            modal_close.click()
            logger.info("–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.debug(f"–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
        finally:
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def wait_for_cards(self, driver, timeout=10):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"""
        try:
            WebDriverWait(driver, timeout).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "a.group.relative.block.overflow-hidden.rounded-xl.shadow-devCard"))
            )
            logger.info("–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except TimeoutException as e:
            logger.warning(f"–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ {timeout} —Å–µ–∫—É–Ω–¥: {e}")
            raise

    def open_page(self, driver, url):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω"""
        logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        time.sleep(random.uniform(1, 3))
        driver.get(url)
        time.sleep(random.uniform(3, 5))
        self.close_modal_if_exists(driver)
        self.wait_for_cards(driver)
        time.sleep(2)

    def parse_date(self, date_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        try:
            months = {
                "—è–Ω–≤": 1, "—Ñ–µ–≤": 2, "–º–∞—Ä": 3, "–∞–ø—Ä": 4, "–º–∞–π": 5, "–∏—é–Ω": 6,
                "–∏—é–ª": 7, "–∞–≤–≥": 8, "—Å–µ–Ω": 9, "–æ–∫—Ç": 10, "–Ω–æ—è": 11, "–¥–µ–∫": 12
            }
            parts = date_str.replace(".", "").split()
            if len(parts) != 3:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
                return 0
            day, month_str, time_part = parts
            day = int(day)
            month = months.get(month_str.lower()[:3])
            if not month:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü: {month_str}")
                return 0
            hour, minute = map(int, time_part.split(":"))
            current_date = datetime.now(timezone.utc)
            current_year = current_date.year
            current_month = current_date.month
            current_day = current_date.day
            if month < current_month or (month == current_month and day <= current_day):
                year = current_year
            else:
                year = current_year - 1
            dt_get = datetime(year, month, day, hour, minute)
            dt_utc = dt_get - timedelta(hours=4)
            dt_utc = dt_utc.replace(tzinfo=timezone.utc)
            return int(dt_utc.timestamp())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}': {e}")
            return 0

    def get_card_status(self, card):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            status_span = card.find_element(By.CSS_SELECTOR, "div.ml-2.mt-2.flex.gap-1\\.5 span")
            status = status_span.text.strip()
            if status in ["S-VIP", "VIP+", "VIP"]:
                return status
            return "normal"
        except NoSuchElementException:
            return "normal"

    def has_date_element(self, card):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞—Ç—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–µ"""
        try:
            card.find_element(By.CSS_SELECTOR, "div.flex.justify-between.break-all.mb-\\[18px\\].md\\:mb-5.mt-3.md\\:mt-3\\.5.px-4 > div.flex.items-center.h-full.gap-1.text-secondary-70.text-xs > span")
            return True
        except NoSuchElementException:
            return False

    def is_valid_card_href(self, card):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            href = card.get_attribute("href")
            if href and href.startswith("https://www.myhome.ge/ru/pr/"):
                return True
            if href and href.startswith("https://auction.livo.ge/"):
                logger.info(f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞: href={href} (–∞—É–∫—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞)")
                return False
            return False
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ href –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            return False

    def run_parser(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        logger.info("üöÄ run_parser() triggered")
        current_timestamp = int(time.time())
        active_users = []
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for key in redis_client.scan_iter("user:*"):
            user_data = {k: v for k, v in redis_client.hgetall(key).items()}
            chat_id = key.split(":")[1]
            subscription_end = int(user_data.get("subscription_end", 0))
            if not subscription_end or subscription_end < current_timestamp:
                continue
            if user_data.get("bot_status") != "running":
                continue
            if not user_data.get("filters_url"):
                logger.error(f"filters_url –¥–ª—è chat_id {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis")
                continue
            if not user_data.get("filters_timestamp"):
                logger.warning(f"filters_timestamp –¥–ª—è chat_id {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            active_users.append({
                "chat_id": chat_id,
                "url": user_data["filters_url"],
                "filters_timestamp": int(user_data["filters_timestamp"]),
                "last_sent_timestamp": int(user_data.get("last_sent_timestamp", 0))
            })

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}")
        
        if not active_users:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return

        driver = init_driver(headless=True)
        try:
            for user in active_users:
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chat_id {user['chat_id']}")
                page_number = 1
                threshold_timestamp = max(user["filters_timestamp"], user["last_sent_timestamp"])
                seen_statuses = {"S-VIP": False, "VIP+": False, "VIP": False, "normal": False}
                encountered_statuses = {"S-VIP": False, "VIP+": False, "VIP": False, "normal": False}
                links_to_process = []
                timestamps = {}

                while True:
                    current_url = user["url"]
                    if "page=" in current_url:
                        current_url = current_url.rsplit("page=", 1)[0] + f"page={page_number}"
                    else:
                        current_url = user["url"] + f"&page={page_number}"
                    
                    logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number}: {current_url}")
                    self.open_page(driver, current_url)
                    cards = driver.find_elements(By.CSS_SELECTOR, "a.group.relative.block.overflow-hidden.rounded-xl.shadow-devCard")
                    
                    if not cards:
                        logger.info("–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                        break
                        
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫) –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}: {len(cards)}")
                    valid_cards = [card for card in cards if self.has_date_element(card) and self.is_valid_card_href(card)]
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (—Å –¥–∞—Ç–æ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º href) –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}: {len(valid_cards)}")
                    
                    stop_pagination = False
                    for i, card in enumerate(valid_cards):
                        try:
                            status = self.get_card_status(card)
                            logger.info(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}): –°—Ç–∞—Ç—É—Å: {status}")
                            encountered_statuses[status] = True
                            
                            date_elem = WebDriverWait(card, 15).until(
                                EC.presence_of_element_located((By.CSS_SELECTOR,
                                    "div.flex.justify-between.break-all.mb-\\[18px\\].md\\:mb-5.mt-3.md\\:mt-3\\.5.px-4 > div.flex.items-center.h-full.gap-1.text-secondary-70.text-xs > span"
                                ))
                            )
                            date_str = date_elem.text.strip()
                            date_timestamp = self.parse_date(date_str)
                            logger.info(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}): –î–∞—Ç–∞: {date_str}, Timestamp: {date_timestamp}")
                            
                            if date_timestamp <= threshold_timestamp:
                                logger.info(f"‚è© –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}) –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–¥–∞—Ç–∞ {date_timestamp} <= {threshold_timestamp})")
                                seen_statuses[status] = True
                                if status == "normal":
                                    seen_statuses["S-VIP"] = True
                                    seen_statuses["VIP+"] = True
                                    seen_statuses["VIP"] = True
                                    logger.info(f"–û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–∞—Ç–æ–π {date_timestamp} <= {threshold_timestamp}, –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±—É–¥—É—Ç —Å—Ç–∞—Ä—à–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                                    stop_pagination = True
                                    break
                            else:
                                href = card.get_attribute("href")
                                if not href:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å href –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number})")
                                    continue
                                links_to_process.append(href)
                                timestamps[href] = date_timestamp
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}): {e}")
                    
                    if stop_pagination:
                        break
                        
                    if page_number == 1:
                        for status in encountered_statuses:
                            if not encountered_statuses[status]:
                                logger.info(f"–°—Ç–∞—Ç—É—Å {status} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
                                seen_statuses[status] = True
                    
                    all_processed = True
                    for status in encountered_statuses:
                        if encountered_statuses[status] and not seen_statuses[status]:
                            all_processed = False
                            break
                    
                    if all_processed and not links_to_process:
                        logger.info(f"–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['chat_id']} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}")
                        break
                    
                    try:
                        next_page = driver.find_element(By.CSS_SELECTOR, "a[aria-label='Next page']")
                        if "disabled" in next_page.get_attribute("class"):
                            logger.info("–ö–Ω–æ–ø–∫–∞ '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                            break
                        page_number += 1
                    except NoSuchElementException:
                        logger.info("–ö–Ω–æ–ø–∫–∞ '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                        break

                logger.info(f"–°–æ–±—Ä–∞–Ω–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(links_to_process)} –¥–ª—è chat_id {user['chat_id']}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
                for i, href in enumerate(links_to_process):
                    try:
                        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É {i+1}/{len(links_to_process)}: {href}")
                        parse_card = get_parse_function(href)
                        card_data = parse_card(driver, href)
                        if not card_data:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ {href}")
                            continue
                        send_to_telegram(user["chat_id"], card_data)
                        date_timestamp = timestamps.get(href, 0)
                        latest_timestamp = max(threshold_timestamp, date_timestamp)
                        if latest_timestamp > threshold_timestamp:
                            redis_client.hset(f"user:{user['chat_id']}", "last_sent_timestamp", int(time.time()))
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω last_sent_timestamp –¥–ª—è chat_id {user['chat_id']}: {latest_timestamp}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ {href}: {e}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        finally:
            driver.quit()

        logger.info("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ü–∏–∫–ª")

    def signal_handler(self, signum, frame):
        """Graceful shutdown handler"""
        logger.info(f"Received signal {signum}, shutting down parser gracefully...")
        self.running = False
        if self.scheduler:
            logger.info("Shutting down scheduler...")
            self.scheduler.shutdown(wait=True)
        sys.exit(0)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
            signal.signal(signal.SIGTERM, self.signal_handler)
            signal.signal(signal.SIGINT, self.signal_handler)
            
            self.running = True
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler = BlockingScheduler()
            self.scheduler.add_job(
                self.run_parser, 
                IntervalTrigger(minutes=6),
                id='parser_job',
                max_instances=1,
                coalesce=True
            )
            
            logger.info("‚úÖ Scheduler configured successfully")
            logger.info(f"üîÅ Jobs in scheduler: {self.scheduler.get_jobs()}")
            
            # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ä–∞–∑—É
            logger.info("üöÄ Running initial parse...")
            self.run_parser()
            
            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            logger.info("üöÄ Starting scheduler...")
            self.scheduler.start()
            
        except Exception as e:
            logger.error(f"‚ùå Error starting parser: {e}")
            raise

if __name__ == "__main__":
    parser = SeleniumParser()
    parser.run()
