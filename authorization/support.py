# authorization/support.py
from telegram import Update
from telegram.ext import ContextTypes
import re
from utils.logger import logger
from utils.translations import translations
from authorization.subscription import get_user_data, get_user_language

async def handle_support_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug("üì• handle_support_text triggered")
    logger.debug(f"üë§ From user: {update.effective_user.id}, chat: {update.effective_chat.id}")

    # Check if this is a reply to a support message
    if update.message.reply_to_message:
        original_message = update.message.reply_to_message.text
        user_id_match = re.search(r"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: (\d+)", original_message)
        if user_id_match:
            user_id = int(user_id_match.group(1))
            reply = update.message.text or ""
            if not reply.strip():
                logger.warning("‚ö†Ô∏è Empty reply message, ignoring")
                user_data = get_user_data(update.effective_chat.id)
                lang = get_user_language(update, user_data)
                error_text = translations['support_empty_reply'][lang]
                await update.message.reply_text(error_text)
                return

            logger.debug(f"üì§ Sending reply to user {user_id}: {reply}")

            try:
                # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (user_id)
                user_data = get_user_data(user_id)
                lang = get_user_language(update, user_data)
                reply_text = translations['support_reply'][lang].format(reply=reply)
                await context.bot.send_message(
                    chat_id=user_id,
                    text=reply_text,
                    disable_web_page_preview=True
                )
                # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
                admin_data = get_user_data(update.effective_chat.id)
                admin_lang = get_user_language(update, admin_data)
                success_text = translations['support_reply_sent'][admin_lang]
                await update.message.reply_text(success_text)
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {reply}")
            except Exception as e:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                admin_data = get_user_data(update.effective_chat.id)
                admin_lang = get_user_language(update, admin_data)
                error_text = translations['support_reply_error'][admin_lang].format(error=str(e))
                await update.message.reply_text(error_text)
        else:
            logger.debug("‚ÑπÔ∏è Not a reply to a support message, ignoring")
    else:
        logger.debug("‚ÑπÔ∏è No reply context, ignoring message")

# –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–∏—Ö –∫–∞–∫ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
#known_buttons = {"üî¥ –°—Ç–∞—Ä—Ç", "üü¢ –°—Ç–æ–ø", "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"}
# 1. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏—à–µ–¥—à–µ–µ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –∞ –Ω–µ —á–µ—Ä–µ–∑ WebApp
#async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    #text = update.message.text
    #if text in known_buttons:
        #return
    #await context.bot.send_message(
        #update.effective_chat.id,
        #"‚ùó–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –º–µ–Ω—é –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª.",
    #)  
