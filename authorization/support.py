# authorization/support.py
from python_telegram_bot import Update  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from python_telegram_bot.ext import ContextTypes  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import re
from utils.logger import logger

async def handle_support_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug("üì• handle_support_text triggered")
    logger.debug(f"üë§ From user: {update.effective_user.id}, chat: {update.effective_chat.id}")

    # Check if this is a reply to a support message
    if update.message.reply_to_message:
        original_message = update.message.reply_to_message.text
        user_id_match = re.search(r"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: (\d+)", original_message)
        if user_id_match:
            user_id = int(user_id_match.group(1))
            reply = update.message.text or ""
            if not reply.strip():
                logger.warning("‚ö†Ô∏è Empty reply message, ignoring")
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.")
                return

            logger.debug(f"üì§ Sending reply to user {user_id}: {reply}")

            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üí¨ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{reply}",
                    disable_web_page_preview=True
                )
                await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {reply}")
            except Exception as e:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                error_message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}"
                await update.message.reply_text(error_message)
        else:
            logger.debug("‚ÑπÔ∏è Not a reply to a support message, ignoring")
    else:
        logger.debug("‚ÑπÔ∏è No reply context, ignoring message")
        
known_buttons = {"üî¥ –°—Ç–∞—Ä—Ç","üü¢ –°—Ç–æ–ø","üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ","‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏","üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"}
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    message_text = update.message.text

    if message_text in known_buttons:
        return

    await context.bot.send_message(chat_id, "‚ùó–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –º–µ–Ω—é –∫–Ω–æ–ø–∫—É –ü–æ–¥–¥–µ—Ä–∂–∫–∞.")

async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    response = "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ."
    await context.bot.send_message(chat_id, response)