from datetime import datetime, timedelta, timezone
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from utils.redis_client import redis_client


INACTIVITY_TTL = int(1.2 * 30 * 24 * 60 * 60)  # 1.2 –º–µ—Å—è—Ü–∞
TRIAL_TTL = 2 * 24 * 60 * 60  # 48 —á–∞—Å–æ–≤
ACTIVE_SUBSCRIPTION_MESSAGE = "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ üü¢"

def save_user_data(chat_id: int, data: dict):
    redis_client.hset(f"user:{chat_id}", mapping=data)
    redis_client.expire(f"user:{chat_id}", INACTIVITY_TTL)

def get_user_data(chat_id: int):
    return redis_client.hgetall(f"user:{chat_id}")

def get_end_of_subscription():
    subscription_end = datetime.now(timezone.utc) + timedelta(days=30)
    return int(subscription_end.timestamp())

def save_bot_status(chat_id: int, status: str, set_sub_end: bool = False, custom_sub_end: datetime | None = None):
    user_data = get_user_data(chat_id)
    user_data['bot_status'] = status

    if custom_sub_end:
        end_timestamp = int(custom_sub_end.timestamp())
        ttl = end_timestamp - int(datetime.now(timezone.utc).timestamp())
        user_data['subscription_end'] = str(end_timestamp)
        redis_client.expire(f"user:{chat_id}", ttl)
    elif set_sub_end:
        end_timestamp = get_end_of_subscription()
        ttl = end_timestamp - int(datetime.now(timezone.utc).timestamp())
        user_data['subscription_end'] = str(end_timestamp)
        redis_client.expire(f"user:{chat_id}", ttl)
    else:
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º Redis-–∫–ª—é—á –∂–∏–≤—ã–º 1.2 –º–µ—Å—è—Ü–∞
        redis_client.expire(f"user:{chat_id}", INACTIVITY_TTL)

    save_user_data(chat_id, user_data)

def is_subscription_active(chat_id: int) -> bool:
    user_data = get_user_data(chat_id)
    ts = user_data.get('subscription_end')
    return ts and int(ts) > int(datetime.now(timezone.utc).timestamp())

def get_bot_status(chat_id: int) -> str:
    user_data = get_user_data(chat_id)
    return user_data.get('bot_status', "stopped")

def get_settings_keyboard(chat_id: int):
    status = get_bot_status(chat_id)
    status_btn = "üü¢ –°—Ç–æ–ø" if status == "running" else "üî¥ –°—Ç–∞—Ä—Ç"
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", web_app={"url": "https://realestatege.netlify.app"}), KeyboardButton(status_btn)],
        [KeyboardButton("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ"), KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", web_app={"url": "https://realestatege.netlify.app/support"})] 
    ], resize_keyboard=True)

async def send_status_message(chat_id: int, context: ContextTypes.DEFAULT_TYPE, text: str):
    await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=get_settings_keyboard(chat_id))

async def welcome_new_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cm = update.my_chat_member
    if cm.chat.type == "private" and cm.old_chat_member.status == "kicked" and cm.new_chat_member.status == "member":
        await send_status_message(cm.chat.id, context, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ üî¥ –°—Ç–∞—Ä—Ç")

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    if text == "üî¥ –°—Ç–∞—Ä—Ç":
        if is_subscription_active(chat_id):
            save_bot_status(chat_id, "running")
            await send_status_message(chat_id, context, "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ñ–¥—ë–º —Å–≤–µ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        else:
            await context.bot.send_invoice(
                chat_id=chat_id,
                title="–î–æ—Å—Ç—É–ø –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º",
                description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
                payload=f"toggle_bot_status:{chat_id}:running",
                provider_token="",
                currency="XTR",
                prices=[{"label": "–°—Ç–æ–∏–º–æ—Å—Ç—å", "amount": 250}],
                start_parameter="toggle-bot-status"
            )
    elif text == "üü¢ –°—Ç–æ–ø":
        save_bot_status(chat_id, "stopped")
        message = "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ üî¥" if not is_subscription_active(chat_id) else "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üõë."
        await send_status_message(chat_id, context, message)

    elif text == "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ":
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
            if is_subscription_active(chat_id):
                await context.bot.send_message(chat_id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
                return
            if redis_client.get(f"trial_used:{chat_id}") == "true":
                await context.bot.send_message(chat_id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ 2 –¥–Ω—è!")
                await context.bot.send_invoice(
                    chat_id=chat_id,
                    title="–î–æ—Å—Ç—É–ø –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º",
                    description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
                    payload=f"toggle_bot_status:{chat_id}:running",
                    provider_token="",
                    currency="XTR",
                    prices=[{"label": "–°—Ç–æ–∏–º–æ—Å—Ç—å", "amount": 250}],
                    start_parameter="toggle-bot-status"
                )
                return
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            redis_client.set(f"trial_used:{chat_id}", "true")
            trial_end = datetime.now(timezone.utc) + timedelta(seconds=TRIAL_TTL)
            save_bot_status(chat_id, "running", custom_sub_end=trial_end)
            await context.bot.send_message(chat_id, "–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã 2 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ üü¢")

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    _, payload_chat_id, new_status = update.message.successful_payment.invoice_payload.split(":")
    
    if chat_id != int(payload_chat_id):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    user_data = get_user_data(chat_id)
    now = datetime.now(timezone.utc)

    current_end_ts = int(user_data.get("subscription_end", "0"))
    current_end = datetime.fromtimestamp(current_end_ts, tz=timezone.utc)

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç –∫–æ–Ω—Ü–∞, –∏–Ω–∞—á–µ ‚Äî –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
    if current_end > now:
        new_end = current_end + timedelta(days=30)
    else:
        new_end = now + timedelta(days=30)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ
    save_bot_status(chat_id, new_status, custom_sub_end=new_end)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    formatted_date = new_end.strftime("%d-%m-%Y %H:%M")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_status_message(chat_id, context, f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞! üü¢\n–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {formatted_date}") 

async def pre_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.answer_pre_checkout_query(update.pre_checkout_query.id, ok=True)                      