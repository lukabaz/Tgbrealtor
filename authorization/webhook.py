import orjson
from datetime import datetime, timezone
from telegram import Update
from telegram.ext import ContextTypes
from authorization.subscription import save_user_data, send_status_message
from utils.logger import setup_logger
from utils.telegram_utils import retry_on_timeout

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger("webhook", "logs/bot.log")

def format_filters_response(filters):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    city_map = {'1': '–¢–±–∏–ª–∏—Å–∏', '2': '–ë–∞—Ç—É–º–∏', '3': '–ö—É—Ç–∞–∏—Å–∏'}
    deal_type_map = {'rent': '–ê—Ä–µ–Ω–¥–∞', 'sale': '–ü—Ä–æ–¥–∞–∂–∞'}
    own_ads_map = {'1': '–î–∞', '0': '–ù–µ—Ç'}

    city = city_map.get(filters.get('city', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')
    districts = []
    for city_key in ['tbilisi', 'batumi', 'kutaisi']:
        districts.extend(filters.get('districts', {}).get(city_key, []))
    response = (
        f"–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–†–∞–π–æ–Ω—ã: {', '.join(districts) if districts else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"–¢–∏–ø —Å–¥–µ–ª–∫–∏: {deal_type_map.get(filters.get('deal_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–¶–µ–Ω–∞: {filters.get('price_from', '0')}-{filters.get('price_to', '0')}$\n"
        f"–≠—Ç–∞–∂: {filters.get('floor_from', '0')}-{filters.get('floor_to', '0')}\n"
        f"–ö–æ–º–Ω–∞—Ç: {filters.get('rooms_from', '0')}-{filters.get('rooms_to', '0')}\n"
        f"–°–ø–∞–ª–µ–Ω: {filters.get('bedrooms_from', '0')}-{filters.get('bedrooms_to', '0')}\n"
        f"–¢–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫: {own_ads_map.get(filters.get('own_ads', '0'), '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    )
    logger.info(f"Formatted filters response: {response}")
    return response

async def webhook_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ Telegram"""
    chat_id = update.message.chat_id
    logger.info(f"Received webhook update for chat_id: {chat_id}")

    try:
        filters_data = orjson.loads(update.message.web_app_data.data)
        logger.debug(f"Parsed webhook data: {filters_data}")

        if "url" in filters_data:
            logger.info(f"Saving filters for chat_id: {chat_id}")
            save_user_data(chat_id, {"filters_url": filters_data["url"]})
            utc_timestamp = int(datetime.now(timezone.utc).timestamp())
            logger.info(f"Saving filters_timestamp: {utc_timestamp} (UTC)")
            save_user_data(chat_id, {"filters_timestamp": str(utc_timestamp)})

            async def send_confirmation():
                logger.info(f"Sending confirmation to chat_id: {chat_id}")
                await send_status_message(chat_id, context, format_filters_response(filters_data))
            await retry_on_timeout(send_confirmation, chat_id=chat_id, message_text="–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            logger.info(f"Filters saved and confirmation sent to chat_id: {chat_id}")

        elif "supportMessage" in filters_data:
            message = filters_data["supportMessage"]
            logger.info(f"Received support message from chat_id: {chat_id}: {message}")
            await context.bot.send_message('6770986953', f"üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç {chat_id}:\n{message}")
            await context.bot.send_message(chat_id, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            logger.info(f"Support message sent to admin and confirmation sent to chat_id: {chat_id}")

        else:
            logger.warning(f"No valid data in webhook for chat_id: {chat_id}")
            await send_status_message(chat_id, context, "–û—à–∏–±–∫–∞: URL –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")

    except orjson.JSONDecodeError as e:
        logger.error(f"Failed to parse webhook data for chat_id: {chat_id}: {e}")
        await send_status_message(chat_id, context, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"Error processing webhook for chat_id: {chat_id}: {e}")
        await send_status_message(chat_id, context, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")