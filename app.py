# app.py
import os
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, PreCheckoutQueryHandler, ChatMemberHandler, Dispatcher
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
from config import TELEGRAM_TOKEN, WEBHOOK_URL
from authorization.subscription import welcome_new_user, handle_buttons, successful_payment, pre_checkout
from authorization.webhook import webhook_update
from authorization.support import handle_user_message
from utils.redis_client import redis_client
from sites.router import get_parse_function
from utils.driver import init_driver
from tg.sender import send_to_telegram
import time
import random
import logging
from datetime import datetime, timezone, timedelta
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename="app.log", level=logging.INFO, format="%(asctime)s - %(message)s", encoding="utf-8")

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
bot_app = Application.builder().token(TELEGRAM_TOKEN).build()
dispatcher = Dispatcher(bot_app.bot, None, workers=0)

# Handlers –¥–ª—è –±–æ—Ç–∞
bot_app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webhook_update))
bot_app.add_handler(ChatMemberHandler(welcome_new_user, ChatMemberHandler.MY_CHAT_MEMBER))
bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
bot_app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment)) 
bot_app.add_handler(PreCheckoutQueryHandler(pre_checkout))
bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))

# Health check endpoint –¥–ª—è Render
@app.route('/healthz')
def healthz():
    return 'ok', 200

# Webhook endpoint
@app.route(f"/{TELEGRAM_TOKEN}", methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot_app.bot)
    dispatcher.process_update(update)
    return 'ok'

# –õ–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ (–∏–∑ parser.py)
def close_modal_if_exists(driver):
    logging.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
    try:
        modal_close = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), '–ó–∞–∫—Ä—ã—Ç—å')]"))
        )
        modal_close.click()
        logging.info("–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logging.debug(f"–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
    finally:
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def wait_for_cards(driver, timeout=10):
    try:
        WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "a.group.relative.block.overflow-hidden.rounded-xl.shadow-devCard"))
        )
        logging.info("–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except TimeoutException as e:
        logging.warning(f"–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ {timeout} —Å–µ–∫—É–Ω–¥: {e}")
        raise

def open_page(driver, url):
    logging.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
    time.sleep(random.uniform(1, 3))
    driver.get(url)
    time.sleep(random.uniform(3, 5))
    close_modal_if_exists(driver)
    wait_for_cards(driver)
    time.sleep(2)

def parse_date(date_str):
    try:
        months = {
            "—è–Ω–≤": 1, "—Ñ–µ–≤": 2, "–º–∞—Ä": 3, "–∞–ø—Ä": 4, "–º–∞–π": 5, "–∏—é–Ω": 6,
            "–∏—é–ª": 7, "–∞–≤–≥": 8, "—Å–µ–Ω": 9, "–æ–∫—Ç": 10, "–Ω–æ—è": 11, "–¥–µ–∫": 12
        }
        parts = date_str.replace(".", "").split()
        if len(parts) != 3:
            logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
            return 0
        day, month_str, time_part = parts
        day = int(day)
        month = months.get(month_str.lower()[:3])
        if not month:
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü: {month_str}")
            return 0
        hour, minute = map(int, time_part.split(":"))
        current_date = datetime.now(timezone.utc)
        current_year = current_date.year
        current_month = current_date.month
        current_day = current_date.day
        if month < current_month or (month == current_month and day <= current_day):
            year = current_year
        else:
            year = current_year - 1
        dt_get = datetime(year, month, day, hour, minute)
        dt_utc = dt_get - timedelta(hours=4)
        dt_utc = dt_utc.replace(tzinfo=timezone.utc)
        return int(dt_utc.timestamp())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}': {e}")
        return 0

def get_card_status(card):
    try:
        status_span = card.find_element(By.CSS_SELECTOR, "div.ml-2.mt-2.flex.gap-1\\.5 span")
        status = status_span.text.strip()
        if status in ["S-VIP", "VIP+", "VIP"]:
            return status
        return "normal"
    except NoSuchElementException:
        return "normal"

def has_date_element(card):
    try:
        card.find_element(By.CSS_SELECTOR, "div.flex.justify-between.break-all.mb-\\[18px\\].md\\:mb-5.mt-3.md\\:mt-3\\.5.px-4 > div.flex.items-center.h-full.gap-1.text-secondary-70.text-xs > span")
        return True
    except NoSuchElementException:
        return False

def is_valid_card_href(card):
    try:
        href = card.get_attribute("href")
        if href and href.startswith("https://www.myhome.ge/ru/pr/"):
            return True
        if href and href.startswith("https://auction.livo.ge/"):
            logging.info(f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞: href={href} (–∞—É–∫—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞)")
            return False
        return False
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ href –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        return False

def run_parser():
    current_timestamp = int(time.time())
    active_users = []
    for key in redis_client.scan_iter("user:*"):
        user_data = {k: v for k, v in redis_client.hgetall(key).items()}
        chat_id = key.split(":")[1]
        subscription_end = int(user_data.get("subscription_end", 0))
        if not subscription_end or subscription_end < current_timestamp:
            continue
        if user_data.get("bot_status") != "running":
            continue
        if not user_data.get("filters_url"):
            logging.error(f"filters_url –¥–ª—è chat_id {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis")
            continue
        if not user_data.get("filters_timestamp"):
            logging.warning(f"filters_timestamp –¥–ª—è chat_id {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        active_users.append({
            "chat_id": chat_id,
            "url": user_data["filters_url"],
            "filters_timestamp": int(user_data["filters_timestamp"]),
            "last_sent_timestamp": int(user_data.get("last_sent_timestamp", 0))
        })

    logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}")
    print(f"üë• –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}")
    for user in active_users:
        logging.info(f"chat_id: {user['chat_id']}, URL: {user['url']}, filters_timestamp: {user['filters_timestamp']}, last_sent_timestamp: {user['last_sent_timestamp']}")
        print(f"chat_id: {user['chat_id']}, URL: {user['url']}, filters_timestamp: {user['filters_timestamp']}, last_sent_timestamp: {user['last_sent_timestamp']}")

    driver = init_driver(headless=True)
    try:
        for user in active_users:
            logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chat_id {user['chat_id']}")
            print(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chat_id {user['chat_id']}")
            page_number = 1
            threshold_timestamp = max(user["filters_timestamp"], user["last_sent_timestamp"])
            seen_statuses = {"S-VIP": False, "VIP+": False, "VIP": False, "normal": False}
            encountered_statuses = {"S-VIP": False, "VIP+": False, "VIP": False, "normal": False}
            links_to_process = []
            timestamps = {}

            while True:
                current_url = user["url"]
                if "page=" in current_url:
                    current_url = current_url.rsplit("page=", 1)[0] + f"page={page_number}"
                else:
                    current_url = user["url"] + f"&page={page_number}"
                logging.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number}: {current_url}")
                print(f"üìÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number}: {current_url}")
                open_page(driver, current_url)
                cards = driver.find_elements(By.CSS_SELECTOR, "a.group.relative.block.overflow-hidden.rounded-xl.shadow-devCard")
                if not cards:
                    logging.info("–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                    print("üõë –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                    break
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫) –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}: {len(cards)}")
                print(f"üß© –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫) –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}: {len(cards)}")
                valid_cards = [card for card in cards if has_date_element(card) and is_valid_card_href(card)]
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (—Å –¥–∞—Ç–æ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º href) –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}: {len(valid_cards)}")
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (—Å –¥–∞—Ç–æ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º href) –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}: {len(valid_cards)}")
                stop_pagination = False
                for i, card in enumerate(valid_cards):
                    try:
                        status = get_card_status(card)
                        logging.info(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}): –°—Ç–∞—Ç—É—Å: {status}")
                        print(f"üîñ –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}): –°—Ç–∞—Ç—É—Å: {status}")
                        encountered_statuses[status] = True
                        date_elem = WebDriverWait(card, 15).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR,
                                "div.flex.justify-between.break-all.mb-\\[18px\\].md\\:mb-5.mt-3.md\\:mt-3\\.5.px-4 > div.flex.items-center.h-full.gap-1.text-secondary-70.text-xs > span"
                            ))
                        )
                        date_str = date_elem.text.strip()
                        print(f"üìÖ –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}): –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã: '{date_str}'")
                        date_timestamp = parse_date(date_str)
                        logging.info(f"–ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}): –î–∞—Ç–∞: {date_str}, Timestamp: {date_timestamp}")
                        print(f"üìÖ –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}): –î–∞—Ç–∞: {date_str}, Timestamp: {date_timestamp}")
                        if date_timestamp <= threshold_timestamp:
                            logging.info(f"‚è© –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}) –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–¥–∞—Ç–∞ {date_timestamp} <= {threshold_timestamp})")
                            print(f"‚è© –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}) –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–¥–∞—Ç–∞ {date_timestamp} <= {threshold_timestamp})")
                            seen_statuses[status] = True
                            if status == "normal":
                                seen_statuses["S-VIP"] = True
                                seen_statuses["VIP+"] = True
                                seen_statuses["VIP"] = True
                                logging.info(f"–û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–∞—Ç–æ–π {date_timestamp} <= {threshold_timestamp}, –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±—É–¥—É—Ç —Å—Ç–∞—Ä—à–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                                print(f"üõë –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–∞—Ç–æ–π {date_timestamp} <= {threshold_timestamp}, –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±—É–¥—É—Ç —Å—Ç–∞—Ä—à–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                                stop_pagination = True
                                break
                        else:
                            href = card.get_attribute("href")
                            if not href:
                                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å href –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number})")
                                continue
                            links_to_process.append(href)
                            timestamps[href] = date_timestamp
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}): {e}")
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}): {e}")
                if stop_pagination:
                    break
                if page_number == 1:
                    for status in encountered_statuses:
                        if not encountered_statuses[status]:
                            logging.info(f"–°—Ç–∞—Ç—É—Å {status} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
                            print(f"üîñ –°—Ç–∞—Ç—É—Å {status} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
                            seen_statuses[status] = True
                all_processed = True
                for status in encountered_statuses:
                    if encountered_statuses[status] and not seen_statuses[status]:
                        all_processed = False
                        break
                if all_processed and not links_to_process:
                    logging.info(f"–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['chat_id']} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}")
                    print(f"üõë –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['chat_id']} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}")
                    break
                try:
                    next_page = driver.find_element(By.CSS_SELECTOR, "a[aria-label='Next page']")
                    if "disabled" in next_page.get_attribute("class"):
                        logging.info("–ö–Ω–æ–ø–∫–∞ '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                        print("üõë –ö–Ω–æ–ø–∫–∞ '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                        break
                    page_number += 1
                except NoSuchElementException:
                    logging.info("–ö–Ω–æ–ø–∫–∞ '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                    print("üõë –ö–Ω–æ–ø–∫–∞ '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é")
                    break
            logging.info(f"–°–æ–±—Ä–∞–Ω–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(links_to_process)} –¥–ª—è chat_id {user['chat_id']}")
            print(f"üîó –°–æ–±—Ä–∞–Ω–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(links_to_process)} –¥–ª—è chat_id {user['chat_id']}")
            for i, href in enumerate(links_to_process):
                try:
                    logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É {i+1}/{len(links_to_process)}: {href}")
                    print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É {i+1}/{len(links_to_process)}: {href}")
                    parse_card = get_parse_function(href)
                    card_data = parse_card(driver, href)
                    if not card_data:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ {href}")
                        continue
                    send_to_telegram(user["chat_id"], card_data)
                    date_timestamp = timestamps.get(href, 0)
                    latest_timestamp = max(threshold_timestamp, date_timestamp)
                    if latest_timestamp > threshold_timestamp:
                        # redis_client.hset(f"user:{chat_id}", "last_sent_timestamp", int(time.time()))
                        redis_client.hset(f"user:{user['chat_id']}", "last_sent_timestamp", int(time.time()))
                        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω last_sent_timestamp –¥–ª—è chat_id {user['chat_id']}: {latest_timestamp}")
                        print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω last_sent_timestamp –¥–ª—è chat_id {user['chat_id']}: {latest_timestamp}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ {href}: {e}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ {href}: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        bot_app.bot.send_message(chat_id='6770986953', text=f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
    finally:
        driver.quit()
    logging.info("–ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ü–∏–∫–ª")
    print("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ü–∏–∫–ª")

# Scheduler –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
scheduler = BackgroundScheduler()
scheduler.add_job(run_parser, IntervalTrigger(minutes=5))
scheduler.start()

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    bot_app.bot.set_webhook(url=WEBHOOK_URL)
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))     