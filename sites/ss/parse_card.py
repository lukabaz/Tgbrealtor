import time
import random
import logging
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def parse_card(driver, url):
    time.sleep(random.uniform(3, 5))  # –ï—â—ë –æ–¥–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    driver.get(url)

    try: title = driver.find_element(By.CSS_SELECTOR, "h1").text
    except NoSuchElementException: title = "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"

    try: area = driver.find_element(By.XPATH, "//span[contains(text(), '–ü–ª–æ—â–∞–¥—å') or contains(text(), 'Area')]/following-sibling::span").text
    except NoSuchElementException: area = "‚ùå –ü–ª–æ—â–∞–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    try: rooms = driver.find_element(By.XPATH, "//span[contains(text(), '–ö–æ–º–Ω–∞—Ç–∞') or contains(text(), 'Rooms')]/following-sibling::span").text
    except NoSuchElementException: rooms = "‚ùå –ö–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    try: floor = driver.find_element(By.XPATH, "//span[contains(text(), '—ç—Ç–∞–∂') or contains(text(), 'Floor')]/following-sibling::span").text
    except NoSuchElementException: floor = "‚ùå –≠—Ç–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"

    try: date = driver.find_element(By.CSS_SELECTOR, "div.flex.items-center.flex-shrink-0.order-1 span").text
    except NoSuchElementException: date = "‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    # try: ad_id = driver.find_element(By.XPATH, "//span[contains(text(), 'ID')]").text.split(":")[1].strip()
    # except NoSuchElementException: ad_id = "‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω"
    try:
        sticky_container = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'col-span-3') and contains(@class, 'sticky')]"))
        )
        driver.execute_script("window.scrollBy(0, 150);")
        time.sleep(random.uniform(0.8, 1.5))

        try:
            price_container = sticky_container.find_element(By.XPATH, ".//div[contains(@class, 'font-tbcx-bold')]")
            spans = price_container.find_elements(By.TAG_NAME, "span")
            price = "".join(span.text for span in spans).strip()
        except NoSuchElementException:
            price = "‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        try:
            owner_tag = sticky_container.find_element(
                By.XPATH, ".//div[contains(text(), '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫') or contains(text(), '–ê–≥–µ–Ω—Ç') or contains(text(), 'Owner') or contains(text(), 'Agent')]"
            ).text
        except NoSuchElementException:
            owner_tag = "‚ùå –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω"

        # –¢–µ–ª–µ—Ñ–æ–Ω
        try:
            phone_span = sticky_container.find_element(
                By.XPATH, ".//button//span[contains(text(), '+995')]"
            )
            phone = phone_span.text.strip()
            print(f"–¢–µ–ª–µ—Ñ–æ–Ω —Å—Ä–∞–∑—É –¥–æ—Å—Ç—É–ø–µ–Ω: {phone}")
        except NoSuchElementException:
            try:
                phone_button = WebDriverWait(sticky_container, 7).until(
                    EC.element_to_be_clickable((By.XPATH, ".//button[.//span[starts-with(text(), '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä') or starts-with(text(), 'Show number')]])]]"))
                )
                print("–ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞.")
                time.sleep(random.uniform(0.8, 1.5))
                phone_button.click()
                time.sleep(random.uniform(0.8, 1.5))

                phone_span = WebDriverWait(sticky_container, 5).until(
                    EC.visibility_of_element_located((By.XPATH, ".//button//span[contains(text(), '+995')]"))
                )
                phone = phone_span.text.strip()
                print(f"–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: {phone}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
                phone = "‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"

        images = []
        try:
            WebDriverWait(driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, "div.swiper-slide img")))
            img_elements = driver.find_elements(By.CSS_SELECTOR, "div.swiper-slide img")
            seen = set()
            for img in img_elements:
                src = img.get_attribute("src")
                if src and src not in seen:
                    seen.add(src)
                    images.append(src)
                    if len(images) == 2:  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 —Å—Å—ã–ª–æ–∫
                        break
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ sticky –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–ª–∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")
        price = "‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        owner_tag = "‚ùå –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω"
        phone = "‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        images = []        

    logging.info("–û–±—ä—è–≤–ª–µ–Ω–∏–µ:")
    logging.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
    logging.info(f"–¶–µ–Ω–∞: {price}")
    logging.info(f"–ü–ª–æ—â–∞–¥—å: {area}")
    logging.info(f"–ö–æ–º–Ω–∞—Ç—ã: {rooms}")
    logging.info(f"–≠—Ç–∞–∂: {floor}")
    # logging.info(f"–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {date}")
    logging.info(f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    logging.info(f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {owner_tag}")
    # logging.info(f"ID: {ad_id}")
    logging.info(f"–§–æ—Ç–æ: {len(images)} —à—Ç.")
    for i, img in enumerate(images):
        logging.info(f"   [{i+1}] {img}")    

    print("üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ:")
    print("üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫:", title)
    print("üí∞ –¶–µ–Ω–∞:", price)
    print("üìê –ü–ª–æ—â–∞–¥—å:", area)
    print("üö™ –ö–æ–º–Ω–∞—Ç—ã:", rooms)
    print("üè¢ –≠—Ç–∞–∂:", floor)
    # print("üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", date)
    print("üìû –¢–µ–ª–µ—Ñ–æ–Ω:", phone)
    print("üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü:", owner_tag)
    # print("üÜî ID:", ad_id)
    print("üñº –§–æ—Ç–æ:", len(images), "—à—Ç.")
    for i, img in enumerate(images):
        print(f"   [{i+1}] {img}")
    print("-" * 40)

    return dict(
        title=title, price=price, area=area, rooms=rooms, floor=floor,
        date=date, phone=phone, owner_tag=owner_tag, link=url, images=images
    )
